library(phyloseq)
BiocManager::install(version = "3.10")
library(phyloseq)
BiocManager::install("phyloseq")
BiocManager::install("ggplot2")
library(phyloseq)
library(ggplot2)
vignette(phyloseq)
otumat <- read.table("../tables/otu_table_tax_amostras.tsv",sep="\t",header=T,row.names=1)
otumat
plot_bar(otumat, x="Dia de desmame", fill="Species")
rownames(otumat) <- paste0("OTU", 1:nrow(otumat))
colnames(otumat) <- paste0("Sample / day", 1:ncol(otumat))
otumat
# Importa OTU table
otumat <- read.table("../tables/otu_table_tax_amostras.tsv", sep="\t", header=T, row.names=1)
otumat
taxmat = read.table("../tables/tax_table_amostras.tsv", sep="\t", header=T, row.names=1)
taxmat = read.table("../tables/tax_table_amostras.tsv", sep="\t", header=T, row.names=1)
rownames(taxmat) <- rownames(otumat)
colnames(taxmat) <- c("Sci_name", "Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
colnames(taxmat) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
taxmat
class(otumat)
class(taxmat)
OTU = otu_table(otumat, taxa_are_rows = TRUE)
TAX = tax_table(taxmat)
OTU
TAX = tax_table(taxmat)
OTU
TAX
physeq = phyloseq(OTU, TAX)
physeq
class(otumat)
class(taxmat)
# Importa OTU table
otumat <- as.matrix(read.table("../tables/otu_table_tax_amostras.tsv", sep="\t", header=T, row.names=1))
otumat
taxmat = as.matrix(read.table("../tables/tax_table_amostras.tsv", sep="\t", header=T, row.names=1))
rownames(taxmat) <- rownames(otumat)
colnames(taxmat) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
taxmat
class(otumat)
class(taxmat)
OTU = otu_table(otumat, taxa_are_rows = TRUE)
TAX = tax_table(taxmat)
OTU
TAX
physeq = phyloseq(OTU, TAX)
physeq
plot_bar(otumat, x="Dia de desmame", fill="Species")
plot_bar(physeq, fill = "Species")
plot_bar(physeq, fill = "Genus")
TopNOTUs <- names(sort(taxa_sums(physeq), TRUE)[1:50])
TopNOTUs <- names(sort(taxa_sums(physeq), TRUE)[1:50])
to_50   <- prune_taxa(TopNOTUs, physeq)
print(to_50)
plot_bar(physeq, x="Dias após desmame", y="Abundância", fill = "Genus")
plot_bar(physeq, x="Dias apos desmame", y="Abundância", fill = "Genus")
print(top_50)
TopNOTUs <- names(sort(taxa_sums(physeq), TRUE)[1:50])
to_50   <- prune_taxa(TopNOTUs, physeq)
print(top_50)
TopNOTUs <- names(sort(taxa_sums(physeq), TRUE)[1:50])
top_50   <- prune_taxa(TopNOTUs, physeq)
print(top_50)
plot_bar(physeq, x="Dias apos desmame", y="Abundância", fill = "Genus")
plot_bar(physeq, x="Dias", y="Abundância", fill = "Genus")
plot_bar(physeq, x="Dias", y="Abundância", fill = "Genus")
plot_bar(top_50, fill = "Genus")
TopNOTU_species <- names(sort(taxa_sums(physeq), TRUE)[1:50])
top_50_species   <- prune_taxa(TopNOTU_species, physeq)
print(top_50_species)
TopNOTU_species <- names(sort(taxa_sums(physeq), TRUE)[1:50])
top_50_species   <- prune_taxa(TopNOTU_species, physeq)
print(top_50_species)
plot_bar(top_50_species, fill = "Species")
# Importa OTU table
otumat <- as.matrix(read.table("../tables/otu_table_tax_amostras.tsv", sep="\t", header=T, row.names=1))
otumat
taxmat = as.matrix(read.table("../tables/tax_table_amostras.tsv", sep="\t", header=T, row.names=1))
rownames(taxmat) <- rownames(otumat)
colnames(taxmat) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
taxmat
class(otumat)
class(taxmat)
OTU = otu_table(otumat, taxa_are_rows = TRUE)
TAX = tax_table(taxmat)
OTU
TAX
physeq = phyloseq(OTU, TAX)
physeq
TopNOTU_genus <- names(sort(taxa_sums(physeq), TRUE)[1:50])
top_50_genus   <- prune_taxa(TopNOTU_genus, physeq)
print(top_50_genus)
plot_bar(top_50_genus, fill = "Genus")
TopNOTU_species <- names(sort(taxa_sums(physeq), TRUE)[1:50])
top_50_species   <- prune_taxa(TopNOTU_species, physeq)
print(top_50_species)
plot_bar(top_50_species, fill = "Species")
TopNOTU_genus <- names(sort(taxa_sums(physeq), TRUE)[1:50])
top_50_genus   <- prune_taxa(TopNOTU_genus, physeq)
print(top_50_genus)
plot_bar(top_50_genus, fill = "Genus")
TopNOTU_species <- names(sort(taxa_sums(physeq), TRUE)[1:50])
top_50_species   <- prune_taxa(TopNOTU_species, physeq)
print(top_50_species)
plot_bar(top_50_species, fill = "Species")
library(phyloseq)
library(ggplot2)
# Importa OTU table
otumat <- as.matrix(read.table("../tables/otu_table_tax_amostras.tsv", sep="\t", header=T, row.names=1))
otumat
taxmat = as.matrix(read.table("../tables/tax_table_amostras.tsv", sep="\t", header=T, row.names=1))
rownames(taxmat) <- rownames(otumat)
colnames(taxmat) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
taxmat
samples_df <- read.table("../metadata.csv", sep="\t", header=T)
samples_df
row.names(samples_df) <- samples_df$sample
class(otumat)
class(taxmat)
class(samples_df)
OTU = otu_table(otumat, taxa_are_rows = TRUE)
TAX = tax_table(taxmat)
samples = sample_data(samples_df)
OTU
TAX
samples
physeq = phyloseq(OTU, TAX, samples)
physeq
# Plota alfa-diversidade
plot_richness(physeq, measures=c("Chao1", "Shannon"))
# Plota NMDS (escalonamento multidimensional)
physeq.ord <- ordinate(physeq, "NMDS", "bray")
plot_ordination(physeq, physeq.ord, type="taxa", color="Genus", shape= "Division",
title="OTUs")
plot_ordination(physeq, physeq.ord, type="taxa", color="Genus", shape= "Division",
title="OTUs") + theme(legend.position="bottom")
plot_ordination(physeq, physeq.ord, type="taxa", color="Genus", shape= "Division",
title="OTUs")
# Plota PCoA
# Taxa de aglomerados no nível de gênero (combina todos com o mesmo nome) e remove todos os taxa sem atribuição de nível de gênero
length(get_taxa_unique(physeq, taxonomic.rank = "Genus"))
physeq_2 = tax_glom(physeq, "Genus", NArm = TRUE)
physeq_2
# Quantos "reads" isso nos deixa
sum(colSums(otu_table(physeq_2)))
# Agora vamos filtrar amostras (outliers e amostras de baixo desempenho)
logt  = transform_sample_counts(physeq_2, function(x) log(1 + x) )
out.pcoa.logt <- ordinate(logt, method = "PCoA", distance = "bray")
evals <- out.pcoa.logt$values$Eigenvalues
sample_variables(physeq)
# Plota PCoA das amostras
plot_ordination(logt, out.pcoa.logt, color="dwp")
# Plota PCoA das amostras
plot_ordination(logt, out.pcoa.logt, color="sample")
library("DESeq2")
sample_data(physeq)$sample <- as.factor(sample_data(physeq)$sample)
ds = phyloseq_to_deseq2(physeq, ~ sample)
ds = DESeq(ds)
sample_data(physeq)$sample
ds = phyloseq_to_deseq2(physeq, ~ sample)
ds
#sample_data(physeq)$sample <- as.factor(sample_data(physeq)$sample)
#ds = phyloseq_to_deseq2(physeq, ~ sample)
#ds = DESeq(ds)
physeq <- taxa_level(physeq, "Genus")
BiocManager::install("microbiomeSeq")
diff = phyloseq_to_deseq2(physeq, ~ time)
# calculate geometric means prior to estimate size factors
gm_mean = function(x, na.rm=TRUE){
exp(sum(log(x[x > 0]), na.rm=na.rm) / length(x))
}
geoMeans = apply(counts(diff), 1, gm_mean)
diff = estimateSizeFactors(diff, geoMeans = geoMeans)
diff = DESeq(diff, fitType="local")
# Note: The default multiple-inference correction is Benjamini-Hochberg, and occurs within the  DESeq function.
res = results(diff)
res = res[order(res$padj, na.last=NA), ]
alpha = 0.01
sigtab = res[(res$padj < alpha), ]
sigtab = cbind(as(sigtab, "data.frame"), as(tax_table(physeq)[rownames(sigtab), ], "matrix"))
head(sigtab)
posigtab = sigtab[sigtab[, "log2FoldChange"] > 0, ]
posigtab = posigtab[, c("baseMean", "log2FoldChange", "lfcSE", "padj", "Phylum", "Class", "Family", "Genus")]
posigtab
posigtab <- posigtab[, c("baseMean", "log2FoldChange", "lfcSE", "padj", "Family", "Genus", "Species")]
posigtab <- posigtab[, c("baseMean", "log2FoldChange", "lfcSE", "padj", "Family", "Genus", "Species")]
sigtabgen <- subset(sigtab, !is.na(Genus))
# Phylum order
x = tapply(sigtabgen$log2FoldChange, sigtabgen$Phylum, function(x) max(x))
x = sort(x, TRUE)
sigtabgen$Phylum = factor(as.character(sigtabgen$Phylum), levels=names(x))
# Genus order
x = tapply(sigtabgen$log2FoldChange, sigtabgen$Genus, function(x) max(x))
x = sort(x, TRUE)
sigtabgen$Genus = factor(as.character(sigtabgen$Genus), levels=names(x))
ggplot(sigtabgen, aes(y=Genus, x=log2FoldChange, color=Phylum)) +
geom_vline(xintercept = 0.0, color = "gray", size = 0.5) +
geom_point(size=6) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
sample_data(ps)$time <- as.factor(sample_data(ps)$time)
sample_data(physeq)$time <- as.factor(sample_data(physeq)$time)
physeq = phyloseq_to_deseq2(physeq, ~ time)
physeq = DESeq(physeq)
alpha <- 0.01
res <- results(physeq, contrast=c("time", "Early", "Late"), alpha=alpha)
res <- res[order(res$padj, na.last=NA), ]
res_sig <- res[(res$padj < alpha), ]
res_sig
res_sig = cbind(as(res_sig, "data.frame"), as(tax_table(physeq)[rownames(res_sig), ], "matrix"))
physeq
OTU <- otu_table(otumat, taxa_are_rows = TRUE)
TAX <- tax_table(taxmat)
samples <- sample_data(samples_df)
OTU
TAX
samples
physeq = phyloseq(OTU, TAX, samples)
physeq
sample_data(physeq)$time <- as.factor(sample_data(physeq)$time)
ds <- phyloseq_to_deseq2(physeq, ~ time)
ds <- DESeq(ds)
alpha <- 0.01
res <- results(ds, contrast=c("time", "Early", "Late"), alpha=alpha)
res <- res[order(res$padj, na.last=NA), ]
res_sig <- res[(res$padj < alpha), ]
res_sig
res_sig = cbind(as(res_sig, "data.frame"), as(tax_table(physeq)[rownames(res_sig), ], "matrix"))
ggplot(res_sig, aes(x=Rank6, y=log2FoldChange, color=Rank2)) +
geom_jitter(size=3, width = 0.2) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
ggplot(res_sig, aes(x="Genus", y=log2FoldChange, color="Phylum")) +
geom_jitter(size=3, width = 0.2) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
res_sig = cbind(as(res_sig, "data.frame"), as(tax_table(physeq)[rownames(res_sig), ], "matrix"))
ggplot(res_sig, aes(x=Rank6, y=log2FoldChange, color=Rank2)) +
geom_jitter(size=3, width = 0.2) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
sample_data(physeq)$time <- as.factor(sample_data(physeq)$time)
ds <- phyloseq_to_deseq2(physeq, ~ time)
ds <- DESeq(ds)
alpha <- 0.01
res <- results(ds, contrast=c("time", "Early", "Late"), alpha=alpha)
res <- res[order(res$padj, na.last=NA), ]
res_sig <- res[(res$padj < alpha), ]
res_sig
res_sig = cbind(as(res_sig, "data.frame"), as(tax_table(physeq)[rownames(res_sig), ], "matrix"))
ggplot(res_sig, aes(x=Rank6, y=log2FoldChange, color=Rank2)) +
geom_jitter(size=3, width = 0.2) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
res_sig = cbind(as(res_sig, "data.frame"), as(tax_table(physeq)[rownames(res_sig), ], "matrix"))
ggplot(res_sig, aes(y=log2FoldChange)) +
geom_jitter(size=3, width = 0.2) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
sample_data(physeq)$time <- as.factor(sample_data(physeq)$time)
ds <- phyloseq_to_deseq2(physeq, ~ time)
ds <- DESeq(ds)
alpha <- 0.01
res <- results(ds, contrast=c("time", "Early", "Late"), alpha=alpha)
res <- res[order(res$padj, na.last=NA), ]
res_sig <- res[(res$padj < alpha), ]
res_sig
res_sig = cbind(as(res_sig, "data.frame"), as(tax_table(physeq)[rownames(res_sig), ], "matrix"))
ggplot(res_sig, aes(y=log2FoldChange)) +
geom_jitter(size=3, width = 0.2) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
sample_data(physeq)$time <- as.factor(sample_data(physeq)$time)
ds <- phyloseq_to_deseq2(physeq, ~ time)
ds <- DESeq(ds)
alpha <- 0.01
res <- results(ds, contrast=c("time", "Early", "Late"), alpha=alpha)
res <- res[order(res$padj, na.last=NA), ]
res_sig <- res[(res$padj < alpha), ]
res_sig
res_sig = cbind(as(res_sig, "data.frame"), as(tax_table(physeq)[rownames(res_sig), ], "matrix"))
ggplot(res_sig, aes(x=Genus, y=log2FoldChange)) +
geom_jitter(size=3, width = 0.2) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
res_sig = cbind(as(res_sig, "data.frame"), as(tax_table(physeq)[rownames(res_sig), ], "matrix"))
ggplot(res_sig, aes(x=Genus, y=log2FoldChange, color="Phylum")) +
geom_jitter(size=3, width = 0.2) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
sample_data(physeq)$time <- as.factor(sample_data(physeq)$time)
ds <- phyloseq_to_deseq2(physeq, ~ time)
ds <- DESeq(ds)
alpha <- 0.01
res <- results(ds, contrast=c("time", "Early", "Late"), alpha=alpha)
res <- res[order(res$padj, na.last=NA), ]
res_sig <- res[(res$padj < alpha), ]
res_sig
res_sig = cbind(as(res_sig, "data.frame"), as(tax_table(physeq)[rownames(res_sig), ], "matrix"))
ggplot(res_sig, aes(x=Genus, y=log2FoldChange, color="Phylum")) +
geom_jitter(size=3, width = 0.2) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
sample_data(physeq)$time <- as.factor(sample_data(physeq)$time)
ds <- phyloseq_to_deseq2(physeq, ~ time)
ds <- DESeq(ds)
alpha <- 0.01
res <- results(ds, contrast=c("time", "Early", "Late"), alpha=alpha)
res <- res[order(res$padj, na.last=NA), ]
res_sig <- res[(res$padj < alpha), ]
res_sig
res_sig = cbind(as(res_sig, "data.frame"), as(tax_table(physeq)[rownames(res_sig), ], "matrix"))
ggplot(res_sig, aes(x=Genus, y=log2FoldChange, color=Phylum)) +
geom_jitter(size=3, width = 0.2) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
sample_data(physeq)$time <- as.factor(sample_data(physeq)$time)
ds <- phyloseq_to_deseq2(physeq, ~ time)
ds <- DESeq(ds)
alpha <- 0.01
res <- results(ds, contrast=c("time", "Early", "Late"), alpha=alpha)
res <- res[order(res$padj, na.last=NA), ]
res_sig <- res[(res$padj < alpha), ]
res_sig
res_sig = cbind(as(res_sig, "data.frame"), as(tax_table(physeq)[rownames(res_sig), ], "matrix"))
ggplot(res_sig, aes(x=Species, y=log2FoldChange, color=Genus)) +
geom_jitter(size=3, width = 0.2) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
res_sig
write.csv(as.data.frame(res_sig),
file="../plots/deseq2_diff_abundance.csv")
sample_data(physeq)$time <- as.factor(sample_data(physeq)$time)
ds <- phyloseq_to_deseq2(physeq, ~ time)
ds <- DESeq(ds)
alpha <- 0.01
# Compara bactérias diferencialmente abundantes poucos dias após o desmame (dwp < 10 -> Early) e vários dias (dwp > 140 -> Late)
res <- results(ds, contrast=c("time", "Early", "Late"), alpha=alpha)
res <- res[order(res$padj, na.last=NA), ]
res_sig <- res[(res$padj < alpha), ]
res_sig
write.csv(as.data.frame(res_sig),
file="../plots/deseq2_diff_abundance.csv")
res_sig = cbind(as(res_sig, "data.frame"), as(tax_table(physeq)[rownames(res_sig), ], "matrix"))
ggplot(res_sig, aes(x=Genus, y=log2FoldChange, color=Genus)) +
geom_jitter(size=3, width = 0.2) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
sample_data(physeq)$time <- as.factor(sample_data(physeq)$time)
ds <- phyloseq_to_deseq2(physeq, ~ time)
ds <- DESeq(ds)
alpha <- 0.01
# Compara bactérias diferencialmente abundantes poucos dias após o desmame (dwp < 10 -> Early) e vários dias (dwp > 140 -> Late)
res <- results(ds, contrast=c("time", "Early", "Late"), alpha=alpha)
res <- res[order(res$padj, na.last=NA), ]
res_sig <- res[(res$padj < alpha), ]
res_sig
write.csv(as.data.frame(res_sig),
file="../plots/deseq2_diff_abundance.csv")
res_sig = cbind(as(res_sig, "data.frame"), as(tax_table(physeq)[rownames(res_sig), ], "matrix"))
ggplot(res_sig, aes(x=Species, y=log2FoldChange, color=Species)) +
geom_jitter(size=3, width = 0.2) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
res_sig
resOrdered <- res_sig[order(res_sig$log2FoldChange),]
View(resOrdered)
res_ordered <- res_sig[order(res_sig$log2FoldChange),]
res_ordered
write.csv(as.data.frame(res_ordered),
file="../plots/deseq2_diff_abundance.csv")
write.csv(as.data.frame(res_ordered),
file="../plots/deseq2_diff_abundance.csv")
sum(res_sig$padj < 0.1, na.rm=TRUE)
res_sig <- subset(res_sig, padj < 0.1)
res_ordered <- res_sig[order(res_sig$log2FoldChange),]
res_ordered
write.csv(as.data.frame(res_ordered),
file="../plots/deseq2_diff_abundance.csv")
sample_data(physeq)$time <- as.factor(sample_data(physeq)$time)
ds <- phyloseq_to_deseq2(physeq, ~ time)
ds <- DESeq(ds)
alpha <- 0.01
# Compara bactérias diferencialmente abundantes poucos dias após o desmame (dwp < 10 -> Early) e vários dias (dwp > 140 -> Late)
res <- results(ds, contrast=c("time", "Early", "Late"), alpha=alpha)
res <- res[order(res$padj, na.last=NA), ]
res_sig <- res[(res$padj < alpha), ]
res_sig
sum(res_sig$padj < 0.1, na.rm=TRUE)
res_sig <- subset(res_sig, padj < 0.1)
res_ordered <- res_sig[order(res_sig$log2FoldChange),]
res_ordered
write.csv(as.data.frame(res_ordered),
file="../plots/deseq2_diff_abundance.csv")
res_sig$padj
# Importa OTU table
otumat <- as.matrix(read.table("../tables/otu_table_tax_amostras.tsv", sep="\t", header=T, row.names=1))
taxmat = as.matrix(read.table("../tables/tax_table_amostras.tsv", sep="\t", header=T, row.names=1))
rownames(taxmat) <- rownames(otumat)
colnames(taxmat) <- c("Domain", "Phylum", "Class", "Order", "Family", "Genus", "Species")
samples_df <- read.table("../metadata.csv", sep="\t", header=T)
row.names(samples_df) <- samples_df$sample
class(otumat)
class(taxmat)
class(samples_df)
OTU <- otu_table(otumat, taxa_are_rows = TRUE)
TAX <- tax_table(taxmat)
samples <- sample_data(samples_df)
OTU
TAX
samples
physeq = phyloseq(OTU, TAX, samples)
physeq
# Os resultados dos gráficos de barra com as 50 bactérias mais abundantes podem ser visualizados no RStudio ou então na pasta 'plots'
TopNOTU_genus <- names(sort(taxa_sums(physeq), TRUE)[1:50])
top_50_genus   <- prune_taxa(TopNOTU_genus, physeq)
print(top_50_genus)
plot_bar(top_50_genus, fill = "Genus")
TopNOTU_species <- names(sort(taxa_sums(physeq), TRUE)[1:50])
top_50_species   <- prune_taxa(TopNOTU_species, physeq)
print(top_50_species)
plot_bar(top_50_species, fill = "Species")
# Plota alfa-diversidade
plot_richness(physeq, measures=c("Chao1", "Shannon"))
# Plota NMDS (escalonamento multidimensional)
physeq.ord <- ordinate(physeq, "NMDS", "bray")
plot_ordination(physeq, physeq.ord, type="taxa", color="Genus", shape= "Division",
title="OTUs")
# Plota PCoA
# Taxa de aglomerados no nível de gênero (combina todos com o mesmo nome) e remove todos os taxa sem atribuição de nível de gênero
length(get_taxa_unique(physeq, taxonomic.rank = "Genus"))
physeq_2 <- tax_glom(physeq, "Genus", NArm = TRUE)
physeq_2
# Quantos "reads" isso nos deixa
sum(colSums(otu_table(physeq_2)))
# Agora vamos filtrar amostras (outliers e amostras de baixo desempenho)
logt  <- transform_sample_counts(physeq_2, function(x) log(1 + x) )
out.pcoa.logt <- ordinate(logt, method = "PCoA", distance = "bray")
evals <- out.pcoa.logt$values$Eigenvalues
sample_variables(physeq)
# Plota PCoA das amostras
plot_ordination(logt, out.pcoa.logt, color="sample")
# Importa os dados no DESeq2
sample_data(physeq)$time <- as.factor(sample_data(physeq)$time)
ds <- phyloseq_to_deseq2(physeq, ~ time)
ds <- DESeq(ds)
# Filtra OTUs usando o cuttoff do False Discovery Rate (FDR) de 0.01
# Compara bactérias diferencialmente abundantes poucos dias após o desmame (dwp < 10 -> Early) e vários dias (dwp > 140 -> Late)
alpha <- 0.01
res <- results(ds, contrast=c("time", "Early", "Late"), alpha=alpha)
res <- res[order(res$padj, na.last=NA), ]
res_sig <- res[(res$padj < alpha), ]
res_sig
# Obtem somente aqueles com p-value ajustado < 0.1
sum(res_sig$padj < 0.1, na.rm=TRUE)
res_sig <- subset(res_sig, padj < 0.1)
# Ordena por log2FoldChange
res_ordered <- res_sig[order(res_sig$log2FoldChange),]
# O resultado (tabela) apresenta base means entre as amostras, log2 fold change, erro padrão, teste estatístico, p-values and p-values ajustados.
res_ordered
# Salva tabela de resultado com bactérias diferencialmente abundantes em arquivo na pasta plots
write.csv(as.data.frame(res_ordered),
file="../plots/deseq2_diff_abundance.csv")
# Plota espécies vs log2FC plot das espécies mais diferencialmente abundantes
res_sig = cbind(as(res_sig, "data.frame"), as(tax_table(physeq)[rownames(res_sig), ], "matrix"))
ggplot(res_sig, aes(x=Species, y=log2FoldChange, color=Species)) +
geom_jitter(size=3, width = 0.2) +
theme(axis.text.x = element_text(angle = -90, hjust = 0, vjust=0.5))
